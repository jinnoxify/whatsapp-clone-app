{"version":3,"sources":["firebase.js","Components/SidebarChat.js","StateProvider.js","Components/Sidebar.js","Components/Chat.js","reducer.js","Components/Login.js","axios.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","addNewChat","id","name","useState","seed","setSeed","messages","setMessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","console","log","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","instance","axios","create","baseURL","App","get","response","channel","Pusher","cluster","subscribe","bind","JSON","stringify","unbind_all","unsubscribe","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.161b5068.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBOXWbVgNTUFbf382NG7iOiZ77vIMIkBdA\",\r\n  authDomain: \"whatsapp-clone-app-8be49.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-clone-app-8be49.firebaseio.com\",\r\n  projectId: \"whatsapp-clone-app-8be49\",\r\n  storageBucket: \"whatsapp-clone-app-8be49.appspot.com\",\r\n  messagingSenderId: \"616162670464\",\r\n  appId: \"1:616162670464:web:c9574d3164564c0115b365\",\r\n};\r\n// Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\n\r\nexport default db;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './SidebarChat.css';\r\nimport { Avatar } from '@material-ui/core'\r\nimport db from '../firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SidebarChat({ addNewChat, id, name }) {\r\n  const [seed, setSeed] = useState('');\r\n  const [messages, setMessages] = useState('')\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000))\r\n\r\n    if (id) {\r\n      db.collection('rooms').doc(id).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\r\n        setMessages(snapshot.docs.map(doc => (\r\n          doc.data()\r\n        )))\r\n      })\r\n    }\r\n  }, [id]);\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt('please enter name for the chat room');\r\n    db.collection('rooms').add({\r\n      name: roomName,\r\n    })\r\n  }\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className='sidebarChat'>\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n        <div className='sidebarChat__info'>\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className='sidebarChat'>\r\n      <h2>Add new chat</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React, { createContext, useContext, useReducer } from 'react'\r\n\r\n// this is the data layer\r\nexport const StateContext = createContext();\r\n\r\n//build a provider\r\nexport const StateProvider = ({ reducer, initialState, children}) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n)\r\n\r\n//this is how we use it inside of a component\r\nexport const useStateValue = () => useContext(StateContext)\r\n","import React, {useState, useEffect } from 'react';\r\nimport './Sidebar.css';\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SidebarChat from './SidebarChat';\r\nimport db from '../firebase'\r\nimport { useStateValue } from '../StateProvider';\r\n\r\nfunction Sidebar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{user}, ] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    db.collection('rooms').onSnapshot(snapshot => (\r\n      setRooms(snapshot.docs.map(doc => (\r\n        {\r\n          id: doc.id,\r\n          data: doc.data()\r\n        }\r\n      )))\r\n    ))\r\n  }, []);\r\n\r\n  return (\r\n    <div className='sidebar'>\r\n      <div className='sidebar__header'>\r\n        <Avatar src={user?.photoURL}/>\r\n        <div className='sidebar__headerRight'>\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className='sidebar__search'>\r\n        <div className='sidebar__searchContainer'>\r\n          <SearchIcon />\r\n          <input placeholder='Search or start new chat' type='text' />\r\n        </div>\r\n      </div>\r\n      <div className='sidebar__chats'>\r\n        <SidebarChat addNewChat />\r\n        {rooms.map(room => (\r\n          <SidebarChat\r\n            key={room.id}\r\n            id={room.id}\r\n            name={room.data.name}\r\n          />\r\n        ))}\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './Chat.css'\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport { useParams } from 'react-router-dom';\r\nimport db from '../firebase'\r\nimport { useStateValue } from '../StateProvider';\r\nimport firebase from 'firebase'\r\n\r\n\r\nfunction Chat() {\r\n  const [seed, setSeed] = useState('');\r\n  const [input, setInput] = useState('');\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [{user}, ] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000))\r\n    if(roomId) {\r\n      db.collection('rooms').doc(roomId).onSnapshot(snapshot => (\r\n        setRoomName(snapshot.data().name)\r\n      ));\r\n      db.collection('rooms').doc(roomId).collection('messages').orderBy('timestamp', 'asc').onSnapshot(snapshot => (\r\n        setMessages(snapshot.docs.map(doc => (\r\n          doc.data()\r\n        )))\r\n    ))\r\n    }\r\n  }, [roomId])\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    db.collection('rooms').doc(roomId).collection('messages').add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n    })\r\n    setInput('')\r\n  }\r\n  console.log(roomId);\r\n  return (\r\n    <div className='chat'>\r\n      <div className='chat__header'>\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n        <div className='chat__headerInfo'>\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            Last seen {' '}\r\n            {new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className='chat__headerRight'>\r\n          <IconButton>\r\n            <SearchIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className='chat__body'>\r\n        {messages.map(message => (\r\n          <p className={`chat__message ${message.name === user.displayName && \"chat__reciever\"}`}>\r\n            <span className='chat__name'>{message.name}</span>\r\n            {message.message}\r\n            <span className='chat__timestamp'>{new Date(message.timestamp?.toDate()).toUTCString()}</span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className='chat__footer'>\r\n        <InsertEmoticonIcon />\r\n        <form>\r\n          <input\r\n            placeholder='Type a message'\r\n            type='text'\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n          />\r\n          <button onClick={sendMessage} type='submit'>Send a message</button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n    user: null\r\n}\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\"\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n            ...state,\r\n            user: action.user\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react'\r\nimport './Login.css'\r\nimport { Button } from '@material-ui/core'\r\nimport { auth, provider } from '../firebase'\r\nimport { useStateValue } from '../StateProvider'\r\nimport { actionTypes } from '../reducer'\r\n\r\nfunction Login() {\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n            .then(result => {\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: result.user\r\n                })\r\n            })\r\n            .catch(error => alert(error.message))\r\n    }\r\n\r\n    return (\r\n        <div className='login'>\r\n            <div className='login__container'>\r\n                <img\r\n                    src='https://hzingenieria.com/wp-content/uploads/2017/08/whatsapp-logo-2.png'\r\n                    alt=''\r\n                />\r\n                <div className='login__next'>\r\n                    <h1>Sign in to WhatsApp</h1>\r\n                </div>\r\n                <Button onClick={signIn}>SIGN WITH GOOGLE</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:9000\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Components/Sidebar\";\nimport Chat from \"./Components/Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Components/Login\";\nimport { useStateValue } from \"./StateProvider\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios\";\n\nfunction App() {\n  const [{ user }] = useStateValue();\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"./messages/sync\").then((response) => {\n      setMessages(response.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const pusher = new Pusher(\"d76e780f6077ae259761\", {\n      cluster: \"us2\",\n    });\n\n    const channel = pusher.subscribe(\"messages\");\n    channel.bind(\"inserted\", function (data) {\n      alert(JSON.stringify(data));\n      setMessages([...messages, data]);\n    });\n\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n  }, [messages]);\n\n  console.log(messages);\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/app\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './StateProvider'\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}